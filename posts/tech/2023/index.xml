<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michael J. Nicholson - Posts from 2023 on Michael J. Nicholson</title><link>https://michjnich.github.io/posts/tech/2023/</link><description>Recent content in Michael J. Nicholson - Posts from 2023 on Michael J. Nicholson</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 19 Sep 2023 15:00:00 +0100</lastBuildDate><atom:link href="https://michjnich.github.io/posts/tech/2023/index.xml" rel="self" type="application/rss+xml"/><item><title>How to measure developer productivity</title><link>https://michjnich.github.io/posts/tech/2023/measuring-developer-productivity/</link><pubDate>Tue, 19 Sep 2023 15:00:00 +0100</pubDate><guid>https://michjnich.github.io/posts/tech/2023/measuring-developer-productivity/</guid><description>So you&amp;rsquo;re responsible for one or more developers? Of course you want to know how well your developers are performing. That&amp;rsquo;s perfectly understandable. So now you&amp;rsquo;re looking for some metrics you can use to measure their performance.
This is where you&amp;rsquo;re going to have problems &amp;hellip;
First of all, this post is mostly directed at people that have never held a developer role (or perhaps have, but it was a long time ago, and they&amp;rsquo;ve pretty much forgotten what it was like, or the world has changed a bit since then).</description></item><item><title>try...except...else...finally</title><link>https://michjnich.github.io/posts/tech/2023/try-except-else-finally/</link><pubDate>Tue, 21 Mar 2023 11:00:00 +0100</pubDate><guid>https://michjnich.github.io/posts/tech/2023/try-except-else-finally/</guid><description>Like many languages, Python provides functionality for catching errors using a try...except block. Java, for example, has try...catch which operates in a similar way, but Python goes beyond other languages by providing extra blocks.
Basic exception handling Let&amp;rsquo;s have a quick run through how exception catching works in Python.
x = 0 # x = 10 try: y = 100 / x except ZeroDivisionError: y = 0 except Exception as e: print(e) This is your standard try.</description></item><item><title>Scheduling backups with GitLab CI/CD</title><link>https://michjnich.github.io/posts/tech/2023/scheduling-backups-gitlab-ci-cd/</link><pubDate>Sat, 11 Mar 2023 12:00:00 +0100</pubDate><guid>https://michjnich.github.io/posts/tech/2023/scheduling-backups-gitlab-ci-cd/</guid><description>I recently created a small Django project to manage a rolling menu for our family meals. It&amp;rsquo;s not a large project. I&amp;rsquo;m hosting it on a Digital Ocean droplet (for which I pay $4/month, and it runs more than one project), and I have a free-tier Postgres database with ElephantSQL. Because this is only a personal project, I didn&amp;rsquo;t want to pay for the database or any backups there (though my experience so far of ElephantSQL is positive, and for a larger project I may well do this!</description></item></channel></rss>