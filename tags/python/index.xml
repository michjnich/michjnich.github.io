<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Michael J. Nicholson</title><link>https://michjnich.github.io/tags/python/</link><description>Recent content in Python on Michael J. Nicholson</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 21 Mar 2023 11:00:00 +0100</lastBuildDate><atom:link href="https://michjnich.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>try...except...else...finally</title><link>https://michjnich.github.io/posts/tech/2023/try-except-else-finally/</link><pubDate>Tue, 21 Mar 2023 11:00:00 +0100</pubDate><guid>https://michjnich.github.io/posts/tech/2023/try-except-else-finally/</guid><description>Like many languages, Python provides functionality for catching errors using a try...except block. Java, for example, has try...catch which operates in a similar way, but Python goes beyond other languages by providing extra blocks.
Basic exception handling Let&amp;rsquo;s have a quick run through how exception catching works in Python.
x = 0 # x = 10 try: y = 100 / x except ZeroDivisionError: y = 0 except Exception as e: print(e) This is your standard try.</description></item><item><title>Email inbox for Django development</title><link>https://michjnich.github.io/posts/tech/2022/2022_12_08_email_inbox_for_django_development/</link><pubDate>Thu, 08 Dec 2022 10:00:00 +0100</pubDate><guid>https://michjnich.github.io/posts/tech/2022/2022_12_08_email_inbox_for_django_development/</guid><description>My current project sends emails. Not a very controversial statement that, as most web projects probably need to send the occasional email.
To make testing during the dev phase easy, I&amp;rsquo;ve configured the project to use the django.core.mail.backends.filebased.EmailBackend backend, which just writes an email to a file in a directory you specify. This means I can just open up the file, read and visually verify the email, and click on any links (eg.</description></item><item><title>Debugging Django in a Docker container</title><link>https://michjnich.github.io/posts/tech/2022/2022_09_17_debug_django_in_docker/</link><pubDate>Sun, 18 Sep 2022 09:00:00 +0200</pubDate><guid>https://michjnich.github.io/posts/tech/2022/2022_09_17_debug_django_in_docker/</guid><description>Have you ever tried hunting for a bug in a Django app that&amp;rsquo;s running in a Docker container? It&amp;rsquo;s not always a trivial process and can have you dotting print statements all over the place because you can&amp;rsquo;t figure out how to use breakpoints properly inside the Docker container.
Well, fortunately there is a solution to this. 2 solutions even.
Solution 1: Configure VS Code to debug a dockerised app Step 1 - Configure VS Code VS Code has built in debugging support for a variety of languages.</description></item></channel></rss>